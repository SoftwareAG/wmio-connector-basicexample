/*
* Copyright (c) 2019 Software AG, Darmstadt, Germany and/or its licensors
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

module.exports = {

  name: "echo",

  title: "Echo",
  help: "This returns an echo of the provided input",

  description: "",
  version: "v1",

  // Different simple inputs (string, password...)
  // The "status" input  will be displayed as a dropdown, where the options will be generated by the configured lookup (getsampleoptions).
  // An input of type integer will accept integer numbers. All non numeric characters will be removed so that, for example, 22xb5AA7 -> 2257
  // An input of type number works in the same way as an integer input. The first "." will be used as the decimal separator, all others will be removed.
  // An input of type enum will be displayed as a dropdown with the given values
  // The inputs in this action do not have any dependency on another inputs.
  // The propertyOrder defines the order the property will appear in the UI, from the top to the bottom.
  // The minLength property defines if a property is required (value > 0) or not. In string properties, it defines the minimum length of the string.
  // In Arrays, the "minItems" property defines the minimun length of the array.
  input: {
    title: "Echo",
    type: "object",
    properties: {
      status: {
        title: "status",
        displayTitle: "Some Status",
        description: "",
        type: "string",
        minLength: 0,
        propertyOrder: 13,
        lookup: {
          id: "getsampleoptions",
          dependencies: []
        }
      },
      echoPublic: {
        title: "Public Echo",
        displayTitle: "Public Echo",
        description: "Default string input field",
        type: "string",
        minLength: 2,
        propertyOrder: 1
      },
      secretEcho: {
        title: "Secret Echo",
        displayTitle: "Secret Echo",
        description: "Password type input field",
        type: "string",
        format: "password",
        minLength: 0,
        propertyOrder: 2
      },
      echoNumber: {
        title: "Echo Number",
        displayTitle: "Number Echo",
        description: "Number input",
        type: "number",
        minLength: 5,
        propertyOrder: 3
      },
      echoBool: {
        title: "Echo Boolean",
        displayTitle: "Boolean Echo",
        description: "Boolean input",
        type: "boolean",
        minLength: 0,
        propertyOrder: 4
      },
      echoInteger: {
        title: "Echo Integer",
        displayTitle: "Integer Echo",
        description: "Integer input",
        type: "integer",
        propertyOrder: 5
      },
      echoObject: {
        title: "Echo Object",
        displayTitle: "Object Echo",
        description: "Object Input",
        type: "object",
        propertyOrder: 6,
        properties: {
          lat: {
            title: "Latitude",
            displayTitle: "First Prop",
            type: "string",
            description: "Some string value"
          },
          longi: {
            title: "Longitude",
            displayTitle: "Last Prop",
            type: "string",
            description: "Some string value"
          },
        }
      },
      echoEnum: {
        type: "string",
        title: "Echo Type",
        enum: ["option 1", "option 2"],
        propertyOrder: 7,
        minLength: 1
      },
      echoDate: {
        type: "string",
        title: "Echo Date",
        format: "date",
        propertyOrder: 8
      },
      echoTime: {
        type: "string",
        title: "Echo Time",
        format: "time",
        propertyOrder: 9
      },
      echoDatetime: {
        type: "string",
        title: "Echo Date/Time",
        format: "datetime",
        propertyOrder: 10
      },
      echoArray: {
        type: "array",
        title: "Echo Array",
        minItems: 1,
        propertyOrder: 11,
        items: {
          type: "object",
          title: "AnEcho",
          properties: {
            echo_name: {
              type: "string",
              title: "Echo Name",
              minimum: 1,
              description: "Name of the echo"
            },
            echo_other: {
              type: "string",
              title: "Echo Other",
              minimum: 1,
              description: "Miscellaneous"
            },
          }
        },
      },
      contact: {
        type: "object",
        title: "Select prefered communication",
        propertyOrder: 12,
        oneOf: [{
            type: "object",
            title: "Email",
            properties: {
              work_email: {
                type: "string",
                title: "Work Email"
              },
              personal_email: {
                type: "string",
                title: "Personal Email"
              }
            }
          },
          {
            type: "object",
            title: "Phone Numbers",
            description: "Enter all the phone numbers",
            properties: {
              items: {
                type: "array",
                title: "Numbers",
                minItems: 1,
                items: {
                  type: "string",
                  title: "Number"
                }
              }
            }
          }
        ]
      },

    }
  },

  /**
   * The output...:
   * - echoResult: string, will be validated
   * - anyResult: any , where a previously non-defined object can be returned...
   */
  output: {
    title: "output",
    type: "object",
    properties: {
      echoResult: {
        title: "echoResult",
        displayTitle: "Result",
        description: "String Result",
        type: "string"
      },
      anyResult: {
        title: "anyResult",
        displayTitle: "Any Result",
        description: "Unformatted Result",
        type: "any"
      },
    }
  },

  mock_input: {
    isTest: true,
    echoPublic: "error",
    secretEcho: "secret",
    echoEnum: "option 1",
    echoInteger: 22,
    echoNumber: 14.5,
    echoBool: false,
    echoObject: {
      lat: "some_lat",
      longi: "some_longi"
    },
    echoArray: [{
      echo_name: "name",
      echo_other: "other"
    }],
    echoDate: "2019-10-17",
    echoTime: "12:12:12",
    echoDatetime: "2019-10-17T00:00:00.000Z",
    
    status: "true",
    auth: {
      auth_token: "dummy-token"
    }
  },

  execute: function (input, output) {
    // the console will show you values while testing
    var _ = require("lodash");
    console.log("+-+- ECHO INPUT: ", [input]);
    var theResult = {
      echoResult: input.echoPublic + " " + input.echoPublic,
      anyResult: {
        echo: input.echoPublic,
        echoSecret: Buffer.from(input.secretEcho).toString('base64'),
        echoNumber: input.echoNumber,
        echoBool: _.get(input, 'echoBool', false),
        echoInteger: _.get(input, 'echoInteger', 0),
        echoObject: _.get(input, 'echoObject', {}),
        echoEnum: _.get(input, 'echoEnum', 'option 1'),
        echoArray: _.get(input, 'echoArray', []),
        echoDate: _.get(input, 'echoDate', ""),
        echoTime: _.get(input, 'echoTime', ""),
        echoDatetime: _.get(input, 'echoDatetime', ""),
        contact: _.get(input, 'contact', {}),
        status: input.status
      },
    }
    if (input.echoPublic.localeCompare("error")) {
      output("THIS IS AN ERROR");
    }
    output(null, theResult);
  }

}